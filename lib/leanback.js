// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.clusterColor = d3.scale.category10();

  window.tagColor = d3.scale.category20();

  window.no_tag = "-";

  window.parseTags = function(content) {
    var tag_lines, tags;
    tag_lines = d3.csv.parseRows(content);
    tags = {};
    tag_lines.map(function(tag_line) {
      var values;
      values = tag_line.slice(1);
      return tags[tag_line[0]] = values.indexOf(window.no_tag) === -1 ? values : [];
    });
    return tags;
  };

  window.getFrequencies = function(array) {
    var frequencies;
    frequencies = {};
    _.chain(array).groupBy(function(p) {
      return p;
    }).each(function(e, i) {
      return frequencies[i] = _.size(e);
    });
    return frequencies;
  };

  window.getTagNames = function(tags) {
    var tagFrequencies, tagValues;
    tagValues = _.chain(tags).values().flatten();
    tagFrequencies = window.getFrequencies(tagValues.value());
    return tagValues.unique().sortBy(function(x) {
      return tagFrequencies[x];
    }).value().reverse();
  };

  window.replace = function(array, replaceItem, replaceWith) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item === replaceItem) {
        _results.push(replaceWith);
      } else {
        _results.push(item);
      }
    }
    return _results;
  };

  window.isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  window.getUrlVars = function() {
    var vars;
    vars = {};
    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/g, function(m, key, value) {
      return vars[key] = value;
    });
    return vars;
  };

  window.resetOnClick = function(model) {
    return d3.select("body").on("click", function() {
      model.set({
        clickedRowId: null
      });
      model.set({
        currentTag: null
      });
      d3.selectAll(".tag_name").classed("current", 0);
      model.set({
        currentCluster: null
      });
      return d3.selectAll(".clusters span").classed("current", 0);
    });
  };

  window.joinSentence = function(arr) {
    var arr2, last, sentence;
    arr2 = arr.slice(0);
    last = arr2.pop();
    if (arr2.length > 0) {
      sentence = arr2.join(", ");
      return sentence + " and " + last;
    } else {
      return last;
    }
  };

  window.DashboardView = (function(_super) {

    __extends(DashboardView, _super);

    function DashboardView() {
      return DashboardView.__super__.constructor.apply(this, arguments);
    }

    DashboardView.prototype.initialize = function() {
      var _this = this;
      this.render();
      this.model.on("change:currentCluster", function() {
        return _this.showTitle();
      });
      return this.model.on("change:currentTag", function() {
        return _this.showTitle();
      });
    };

    DashboardView.prototype.events = function() {
      return {
        "click #dashboard .clusters span": "changeCurrentCluster"
      };
    };

    DashboardView.prototype.changeCurrentCluster = function(e) {
      var currentCluster;
      e.stopPropagation();
      this.model.attributes['currentTag'] = null;
      d3.selectAll(".tag_name").classed("current", 0);
      currentCluster = d3.select(e.target);
      d3.selectAll(".clusters span").classed("current", 0);
      if (currentCluster && this.model.get("currentCluster") === currentCluster.attr("name")) {
        return this.model.set({
          currentCluster: null
        });
      } else {
        currentCluster.classed("current", 1);
        return this.model.set({
          currentCluster: currentCluster.attr("name")
        });
      }
    };

    DashboardView.prototype.showTitle = function() {
      var currentCluster, currentTag, title;
      title = "" + (this.getCurrentRows().length) + " " + this.model.options.rowType;
      if (this.model.options.showGroups) {
        title += " from " + (joinSentence(this.model.columnGroups));
      }
      if (this.model.options.showClusters && (currentCluster = this.model.get("currentCluster"))) {
        title += " (Cluster " + currentCluster + ")";
      }
      if (this.model.options.showTags && (currentTag = this.model.get("currentTag"))) {
        title += " (Tagged " + currentTag + ")";
      }
      d3.select("title").text(title);
      return d3.select("#dashboard h1").text(title);
    };

    DashboardView.prototype.getCurrentRows = function() {
      var currentCluster, currentTag;
      if (this.model.options.showClusters && (currentCluster = this.model.get("currentCluster"))) {
        return d3.selectAll(".row[cluster='" + currentCluster + "']")[0];
      } else if (this.model.options.showTags && (currentTag = this.model.get("currentTag"))) {
        return d3.selectAll(".tag[name='" + currentTag + "']")[0];
      } else {
        return this.model.parsedData;
      }
    };

    DashboardView.prototype.render = function() {
      var _this = this;
      this.showTitle();
      if (this.model.options.showClusters) {
        return d3.select("#dashboard .clusters").selectAll("span").data(this.model.clusterNames).enter().append("span").attr("name", function(d) {
          return d;
        }).text(function(d) {
          return "Cluster " + d;
        }).style("background", function(d) {
          return window.clusterColor(d);
        });
      }
    };

    return DashboardView;

  })(Backbone.View);

  window.LongitudinalModel = (function(_super) {
    var defaults;

    __extends(LongitudinalModel, _super);

    function LongitudinalModel() {
      return LongitudinalModel.__super__.constructor.apply(this, arguments);
    }

    defaults = {
      currentRowId: null,
      clickedRowId: null,
      currentCluster: null,
      currentTag: null
    };

    LongitudinalModel.prototype.initialize = function(parsedData, userOptions) {
      var id;
      if (userOptions == null) {
        userOptions = {};
      }
      this.options = {
        rowNameColumn: userOptions.rowNameColumn || "id",
        specialColumnNames: userOptions.specialColumnNames || ["cluster"],
        rowType: userOptions.rowType,
        tagFile: userOptions.urlVars["tags"],
        showGroups: userOptions.urlVars["groups"],
        showClusters: userOptions.urlVars["clusters"],
        hideHeatmap: userOptions.urlVars["no_heatmap"],
        hidePCP: userOptions.urlVars["no_pcp"],
        hideRowNames: userOptions.urlVars["no_row_names"]
      };
      this.options.specialColumnNames = _.union(this.options.specialColumnNames, this.options.rowNameColumn);
      this.parsedData = parsedData;
      this.rowNames = _.pluck(this.parsedData, this.options.rowNameColumn);
      this.rowIds = (function() {
        var _i, _ref, _results;
        _results = [];
        for (id = _i = 1, _ref = this.parsedData.length; 1 <= _ref ? _i <= _ref : _i >= _ref; id = 1 <= _ref ? ++_i : --_i) {
          _results.push("_row_" + id);
        }
        return _results;
      }).call(this);
      this.columnNames = this.getColumnNames();
      this.columnGroups = this.getColumnGroups();
      this.longitudinalData = this.getLongitudinalData();
      this.groupedLongitudinalData = this.getGroupedLongitudinalData();
      this.clusters = _.pluck(this.parsedData, "cluster");
      return this.clusterNames = this.getClusterNames();
    };

    LongitudinalModel.prototype.getRowName = function(rowName) {
      return this.rowNames[this.rowIds.indexOf(rowName)];
    };

    LongitudinalModel.prototype.getColumnGroups = function() {
      return _.chain(this.columnNames).map(function(columnName) {
        return columnName.split("_")[0];
      }).uniq().value();
    };

    LongitudinalModel.prototype.getLongitudinalValueExtent = function() {
      var longitudinalValues;
      longitudinalValues = _.flatten(this.longitudinalData.map(function(longitudinalDataRow) {
        return longitudinalDataRow.map(function(item) {
          return item.value;
        });
      }));
      return d3.extent(longitudinalValues);
    };

    LongitudinalModel.prototype.getColumnNames = function() {
      var _this = this;
      return _.keys(this.parsedData[0]).filter(function(columnName) {
        return !_.include(_this.options.specialColumnNames, columnName);
      });
    };

    LongitudinalModel.prototype.getLongitudinalData = function() {
      var _this = this;
      return this.parsedData.map(function(row) {
        return _this.columnNames.map(function(columnName) {
          return {
            condition: columnName,
            value: +row[columnName]
          };
        });
      });
    };

    LongitudinalModel.prototype.getGroupedLongitudinalData = function() {
      var _this = this;
      return this.parsedData.map(function(row) {
        var columnGroups, currentGroup, longitudinalValues;
        columnGroups = _this.columnGroups.slice(0);
        currentGroup = columnGroups.shift();
        longitudinalValues = [];
        _this.columnNames.map(function(columnName) {
          if (!columnName.match(RegExp("^" + currentGroup + "_"))) {
            longitudinalValues.push({
              condition: "",
              value: null
            });
            currentGroup = columnGroups.shift();
          }
          return longitudinalValues.push({
            condition: columnName,
            value: +row[columnName]
          });
        });
        return longitudinalValues;
      });
    };

    LongitudinalModel.prototype.getClusterNames = function() {
      var clusterFrequencies;
      clusterFrequencies = window.getFrequencies(this.clusters);
      return _.chain(clusterFrequencies).keys().sortBy(function(x) {
        return clusterFrequencies[x];
      }).value().reverse();
    };

    return LongitudinalModel;

  })(Backbone.Model);

  window.HeatmapView = (function(_super) {

    __extends(HeatmapView, _super);

    function HeatmapView() {
      return HeatmapView.__super__.constructor.apply(this, arguments);
    }

    HeatmapView.prototype.initialize = function() {
      var _this = this;
      if (!this.model.options.hideHeatmap) {
        this.render();
        this.model.on("change:currentRowId", function() {
          return _this.showCurrentRow();
        });
        this.model.on("change:clickedRowId", function() {
          return _this.showClickedRow();
        });
        this.model.on("change:currentCluster", function() {
          return _this.showCurrentCluster();
        });
        return this.model.on("change:currentTag", function() {
          return _this.showCurrentTag();
        });
      }
    };

    HeatmapView.prototype.events = function() {
      return {
        "mouseover .cell": "changeCurrentRowId",
        "mouseout .row": "changeCurrentRowId",
        "click .row": "changeClickedRowId",
        "click .tag": "changeCurrentTag",
        "click .tag_name": "changeCurrentTag"
      };
    };

    HeatmapView.prototype.render = function() {
      var columnName, rowName,
        _this = this;
      this.heatmapColor = d3.scale.linear().domain([-1.5, 0, 1.5]).range(["#278DD6", "#fff", "#d62728"]);
      this.rowTextScaleFactor = 15;
      this.columnTextScaleFactor = 10;
      this.columnNamesMargin = d3.max((function() {
        var _i, _len, _ref, _results;
        _ref = this.model.columnNames;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          columnName = _ref[_i];
          _results.push(columnName.length);
        }
        return _results;
      }).call(this));
      this.rowNamesMargin = d3.max((function() {
        var _i, _len, _ref, _results;
        _ref = this.model.rowNames;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rowName = _ref[_i];
          _results.push(rowName.length);
        }
        return _results;
      }).call(this));
      this.margin = {
        top: 250,
        right: this.calculateRightMargin(),
        bottom: 50,
        left: 50
      };
      this.cellSize = 25;
      this.width = this.cellSize * this.model.columnNames.length;
      this.height = this.cellSize * this.model.rowNames.length;
      this.heatmap = d3.select(this.el).attr("width", this.width + this.margin.right + this.margin.left).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.x = d3.scale.ordinal().domain(d3.range(this.model.longitudinalData[0].length)).rangeBands([0, this.width]);
      this.y = d3.scale.ordinal().domain(d3.range(this.model.rowNames.length)).rangeBands([0, this.height]);
      this.columns = this.heatmap.selectAll(".column").data(this.model.columnNames).enter().append("g").attr("class", "column");
      this.columns.append("text").attr("x", 6).attr("y", this.x.rangeBand() / 2).attr("dy", "-.5em").attr("dx", ".5em").attr("text-anchor", "start").attr("transform", function(d, i) {
        return "translate(" + (_this.x(i)) + ") rotate(-45)";
      }).text(function(d, i) {
        return _this.model.columnNames[i];
      });
      this.addRows();
      if (this.model.options.tagFile) {
        this.addTags();
      }
      this.$("rect.cell").tooltip({
        title: function() {
          return this.__data__.condition.split("_").join(" ") + "<br>" + d3.round(this.__data__.value, 2);
        },
        placement: "top"
      });
      return this.$("rect.tag").tooltip({
        title: function() {
          return this.__data__;
        },
        placement: "top"
      });
    };

    HeatmapView.prototype.calculateRightMargin = function() {
      var maxrowNameLength;
      maxrowNameLength = d3.max(this.model.rowNames.map(function(x) {
        return x.length;
      }));
      return maxrowNameLength * 14;
    };

    HeatmapView.prototype.addRows = function() {
      var getRow, rows, that,
        _this = this;
      that = this;
      getRow = function(row) {
        var cell,
          _this = this;
        return cell = d3.select(this).selectAll(".cell").data(row).enter().append("rect").attr("class", "cell").attr("x", function(d, i) {
          return that.x(i);
        }).attr("width", that.x.rangeBand()).attr("height", that.x.rangeBand()).text(function(d) {
          return d;
        }).style("fill", function(d) {
          return that.heatmapColor(d.value);
        });
      };
      rows = this.heatmap.selectAll(".row").data(this.model.longitudinalData).enter().append("g").attr("class", "row").attr("row-id", function(d, i) {
        return _this.model.rowIds[i];
      }).attr("cluster", function(d, i) {
        return _this.model.clusters[i];
      }).attr("transform", function(d, i) {
        return "translate(0," + (_this.y(i)) + ")";
      }).each(getRow);
      if (!this.model.options.hideRowNames) {
        return rows.append("text").attr("x", this.width + this.calculateRightMargin()).attr("y", this.x.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "end").text(function(d, i) {
          return _this.model.rowNames[i];
        });
      }
    };

    HeatmapView.prototype.addTags = function() {
      var heatmapWidth, maxTagNameLength, tagMargin, tagNames, tagScale, tagSize, tags,
        _this = this;
      tags = "";
      $.ajax({
        url: this.model.options.tagFile,
        context: document.body,
        async: false,
        success: function(data) {
          return tags = window.parseTags(data);
        }
      });
      tagNames = window.getTagNames(tags);
      maxTagNameLength = d3.max(tagNames.map(function(x) {
        return x.length;
      })) * 12;
      tagSize = this.cellSize / 2;
      tagMargin = 12;
      heatmapWidth = d3.select("#heatmap").node().offsetWidth;
      tagScale = d3.scale.ordinal().domain(d3.range(tagNames.length)).rangeBands([0, (tagNames.length - 1) * (tagSize + tagMargin)]);
      this.heatmap.selectAll(".row").selectAll(".tag").data(function(d, i) {
        return tags[_this.model.rowNames[i]];
      }).enter().append("rect").attr("class", "tag").attr("x", heatmapWidth).attr("y", this.x.rangeBand() / 4).attr("transform", function(d, i) {
        return "translate(" + tagScale(tagNames.indexOf(d)) + ",0)";
      }).attr("width", this.x.rangeBand() / 2).attr("height", this.x.rangeBand() / 2).attr("row-id", function(d) {
        return d;
      }).text(function(d) {
        return d;
      }).style("fill", function(d, i) {
        return window.tagColor(d);
      }).style("stroke", "none");
      this.heatmap.selectAll(".tag_name").data(tagNames).enter().append("text").attr("class", "tag_name").attr("dx", heatmapWidth + 10).attr("dy", 0).attr("transform", function(d, i) {
        return "translate(" + tagScale(tagNames.indexOf(d)) + (",0) rotate(-45 " + heatmapWidth + " 0)");
      }).attr("text-anchor", "start").attr("name", function(d) {
        return d;
      }).text(function(d) {
        return d;
      }).attr("fill", "black");
      return d3.select("#heatmap").attr("width", parseInt(d3.select("#heatmap").attr("width")) + tagNames.length * 25 + 100);
    };

    HeatmapView.prototype.changeCurrentRowId = function(e) {
      e.stopPropagation();
      return this.model.set({
        currentRowId: e.type === "mouseover" ? d3.select(e.target.parentNode).attr("row-id") : null
      });
    };

    HeatmapView.prototype.changeClickedRowId = function(e) {
      e.stopPropagation();
      return this.model.set({
        clickedRowId: d3.select(e.target.parentNode).attr("row-id")
      });
    };

    HeatmapView.prototype.changeCurrentTag = function(e) {
      var currentTag;
      e.stopPropagation();
      this.model.attributes['currentCluster'] = null;
      d3.selectAll(".clusters span").classed("current", 0);
      d3.selectAll(".tag_name").classed("current", 0);
      currentTag = d3.select(e.target);
      if (currentTag && this.model.get("currentTag") === currentTag.attr("name")) {
        return this.model.set({
          currentTag: null
        });
      } else {
        d3.selectAll(".tag_name[row-id=" + (currentTag.text()) + "]").classed("current", 1);
        return this.model.set({
          currentTag: currentTag.text()
        });
      }
    };

    HeatmapView.prototype.showCurrentRow = function() {
      var currentRowId, currentRowIdId;
      d3.selectAll(".row").filter(":not(.clicked)").classed("current", 0);
      currentRowIdId = this.model.get("currentRowIdId");
      if (currentRowIdId != null) {
        currentRowId = this.heatmap.select("[row-id=" + currentRowIdId + "]");
        return currentRowId.classed("current", 1);
      }
    };

    HeatmapView.prototype.showClickedRow = function() {
      var clickedRow, clickedRowId;
      clickedRowId = this.model.get("clickedRowId");
      if (clickedRowId != null) {
        clickedRow = this.heatmap.select("[row-id=" + clickedRowId + "]");
        d3.select("#pcp").style("top", Math.max(150, clickedRow.filter(".row").node().offsetParent.scrollTop) + 50);
        this.removeClickedRow();
        return clickedRow.classed("current clicked", 1);
      }
    };

    HeatmapView.prototype.removeClickedRow = function() {
      return d3.selectAll(".row").classed("current clicked", 0);
    };

    HeatmapView.prototype.showCurrentCluster = function() {
      var currentCluster, rowsToUpdate,
        _this = this;
      currentCluster = this.model.get("currentCluster");
      $(".row").hide();
      if (currentCluster) {
        rowsToUpdate = this.heatmap.selectAll(".row[cluster='" + currentCluster + "']");
      } else {
        rowsToUpdate = this.heatmap.selectAll(".row");
      }
      $(rowsToUpdate[0]).show();
      return rowsToUpdate.attr("transform", function(d, i) {
        return "translate(0," + (_this.y(i)) + ")";
      });
    };

    HeatmapView.prototype.showCurrentTag = function() {
      var currentTag, rowsToUpdate,
        _this = this;
      currentTag = this.model.get("currentTag");
      $(".row").hide();
      if (currentTag) {
        rowsToUpdate = d3.selectAll($(".tag[row-id='" + currentTag + "']").parent());
      } else {
        rowsToUpdate = this.heatmap.selectAll(".row");
      }
      $(rowsToUpdate[0]).show();
      return rowsToUpdate.attr("transform", function(d, i) {
        return "translate(0," + (_this.y(i)) + ")";
      });
    };

    return HeatmapView;

  })(Backbone.View);

  window.PcpView = (function(_super) {

    __extends(PcpView, _super);

    function PcpView() {
      return PcpView.__super__.constructor.apply(this, arguments);
    }

    PcpView.prototype.initialize = function() {
      var _this = this;
      if (!this.model.options.hidePCP) {
        this.render();
        this.model.on("change:currentRowId", function() {
          return _this.showCurrentRow();
        });
        this.model.on("change:clickedRowId", function() {
          return _this.showClickedRow();
        });
        this.model.on("change:currentCluster", function() {
          return _this.showCurrentCluster();
        });
        return this.model.on("change:currentTag", function() {
          return _this.showCurrentTag();
        });
      }
    };

    PcpView.prototype.events = function() {
      return {
        "mouseover .expression-line": "changeCurrentRowId",
        "mouseout .expression-line": "changeCurrentRowId",
        "click .expression-line": "changeClickedRowId",
        "click .expression-point": "showExpressionPointText"
      };
    };

    PcpView.prototype.render = function() {
      var columnName,
        _this = this;
      this.columnNamesMargin = d3.max((function() {
        var _i, _len, _ref, _results;
        _ref = this.model.columnNames;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          columnName = _ref[_i];
          _results.push(columnName.length);
        }
        return _results;
      }).call(this));
      this.margin = {
        top: 300,
        right: 50,
        bottom: this.columnNamesMargin * 10,
        left: 150
      };
      this.width = d3.max([400, this.model.columnNames.length * 40]);
      this.height = 300;
      this.pcp = d3.select(this.el).attr("width", this.width + this.margin.right + this.margin.left).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.x = d3.scale.ordinal().domain(this.model.columnNames).rangePoints([0, this.width], .2);
      this.y = d3.scale.linear().domain(this.model.getLongitudinalValueExtent()).range([this.height, 0], .2);
      this.line = d3.svg.line().defined(function(d) {
        return _.isFinite(d.value);
      }).x(function(d) {
        return _this.x(d.condition);
      }).y(function(d) {
        return _this.y(d.value);
      });
      this.xAxis = d3.svg.axis().scale(this.x).tickSize(6, 0);
      this.renderedXAxis = this.pcp.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis);
      this.renderedXAxis.selectAll("text").attr("dx", "-.5em").attr("dy", ".3em").attr("text-anchor", "end").attr("transform", "rotate(-45)");
      this.yAxis = d3.svg.axis().scale(this.y).ticks(4).tickSize(6, 0).orient("left");
      this.renderedYAxis = this.pcp.append("g").attr("class", "y axis").attr("transform", "translate(0,0)").call(this.yAxis);
      this.renderedYAxis.append("text").attr("text-anchor", "middle").attr("dy", "-.5em").text("log-ratio");
      this.addLongitudinalDataLines();
      return this.pcp.append("line").attr("y1", this.y(0)).attr("y2", this.y(0)).attr("x2", this.width).attr("class", "axis zero");
    };

    PcpView.prototype.addLongitudinalDataLines = function() {
      var _this = this;
      this.pcp.selectAll(".expression-line").data(this.getLongitudinalData()).enter().append("path").attr("class", "expression-line").attr("row-id", function(d, i) {
        return _this.model.rowIds[i];
      }).attr("stroke", "steelblue").attr("stroke-opacity", .5).attr("d", this.line);
      if (this.model.options.showClusters) {
        return this.pcp.selectAll(".expression-line").attr("cluster", function(d, i) {
          return _this.model.clusters[i];
        }).attr("stroke", function(d, i) {
          return window.clusterColor(_this.model.clusters[i]);
        });
      }
    };

    PcpView.prototype.getLongitudinalData = function() {
      if (this.model.options.showGroups) {
        return this.model.groupedLongitudinalData;
      } else {
        return this.model.longitudinalData;
      }
    };

    PcpView.prototype.changeCurrentRowId = function(e) {
      e.stopPropagation();
      return this.model.set({
        currentRowId: e.type === "mouseover" ? d3.select(e.target).attr("row-id") : null
      });
    };

    PcpView.prototype.changeClickedRowId = function(e) {
      e.stopPropagation();
      return this.model.set({
        clickedRowId: d3.select(e.target).attr("row-id")
      });
    };

    PcpView.prototype.showExpressionPointText = function(e) {
      var d;
      e.stopPropagation();
      d = e.target.__data__;
      return this.pcp.append("text").attr("class", "expression-text").attr("x", this.x(d.condition)).attr("y", this.y(d.value)).attr("text-anchor", "middle").attr("dy", "-.8em").text(d3.round(d.value, 2));
    };

    PcpView.prototype.showCurrentRow = function() {
      var currentRow, currentRowId;
      this.pcp.selectAll(".expression-line").filter(":not(.clicked)").classed("current", 0);
      this.pcp.selectAll("text.title").filter(":not(.clicked)").remove();
      currentRowId = this.model.get("currentRowId");
      if (currentRowId != null) {
        currentRow = this.pcp.select("[row-id=" + currentRowId + "]");
        currentRow.classed("current", 1);
        if (this.pcp.select(".clicked").empty()) {
          currentRow.node().parentNode.appendChild(currentRow.node());
        }
        this.pcp.selectAll("text.title").filter(".clicked").style("display", "none");
        return this.pcp.append("text").attr("class", "title").attr("x", this.width / 2).attr("y", -40).attr("text-anchor", "middle").text(this.model.getRowName(currentRowId));
      } else {
        return this.pcp.selectAll("text.title").filter(".clicked").style("display", "block");
      }
    };

    PcpView.prototype.showClickedRow = function() {
      var clickedRow, clickedRowId, data;
      clickedRowId = this.model.get("clickedRowId");
      if (clickedRowId != null) {
        clickedRow = this.pcp.select("[row-id=" + clickedRowId + "]");
        clickedRow.node().parentNode.appendChild(clickedRow.node());
        this.removeClickedRow();
        clickedRow.classed("current clicked", 1);
        data = clickedRow.node().__data__;
        this.pcp.selectAll(".expression-point").data(data.filter(function(d) {
          return _.isFinite(d.value);
        })).enter().append("circle").attr("class", "expression-point").attr("cx", this.line.x()).attr("cy", this.line.y()).attr("r", 5);
        this.pcp.selectAll(".expression-text").data(data.filter(this.filterTextDatapoints)).enter().append("text").attr("class", "expression-text").attr("x", this.line.x()).attr("y", this.line.y()).attr("text-anchor", "middle").attr("dy", "-.8em").text(function(d, i) {
          return d3.round(d.value, 2);
        });
        return this.pcp.select("text.title").classed("clicked", 1).text(this.model.getRowName(clickedRowId));
      } else {
        return this.removeClickedRow();
      }
    };

    PcpView.prototype.filterTextDatapoints = function(item, i, arr) {
      var significantDifference;
      significantDifference = .5;
      return (i === 0 && _.isFinite(item.value)) || ((i === arr.length - 1) && _.isFinite(item.value)) || (arr[i - 1].value === null && _.isFinite(item.value)) || (arr[i + 1].value === null && _.isFinite(item.value)) || (_.isFinite(item.value) && item.value > arr[i - 1].value && item.value > arr[i + 1].value && (Math.abs(item.value - arr[i - 1].value) > significantDifference || Math.abs(item.value - arr[i + 1].value) > significantDifference)) || (_.isFinite(item.value) && item.value < arr[i - 1].value && item.value < arr[i + 1].value && (Math.abs(item.value - arr[i - 1].value) > significantDifference || Math.abs(item.value - arr[i + 1].value) > significantDifference));
    };

    PcpView.prototype.removeClickedRow = function() {
      this.pcp.selectAll(".expression-point").remove();
      this.pcp.selectAll(".expression-text").remove();
      this.pcp.selectAll(".expression-line").classed("current clicked", 0);
      return this.pcp.select("text.title").text("");
    };

    PcpView.prototype.showCurrentCluster = function() {
      var currentCluster,
        _this = this;
      currentCluster = this.model.get("currentCluster");
      d3.select("#pcp").style("top", d3.select("body").node().scrollTop);
      if (currentCluster) {
        this.pcp.selectAll(".expression-line").attr("stroke", "#999");
        return this.pcp.selectAll(".expression-line[cluster='" + currentCluster + "']").attr("stroke", function(d, i) {
          return window.clusterColor(currentCluster);
        }).each(function() {
          return this.parentNode.appendChild(this);
        });
      } else {
        this.pcp.selectAll(".expression-line").remove();
        return this.addLongitudinalDataLines();
      }
    };

    PcpView.prototype.showCurrentTag = function() {
      var currentTag, taggedRowIds;
      currentTag = this.model.get("currentTag");
      d3.select("#pcp").style("top", 0);
      scroll(0, 0);
      if (currentTag) {
        taggedRowIds = _(d3.selectAll("#heatmap .row")).chain().first().filter(function(d) {
          return d.style.display !== "none";
        }).map(function(d) {
          return d3.select(d).attr("row-id");
        }).value();
        return this.pcp.selectAll(".expression-line").attr("stroke", "#999").filter(function(d, i) {
          return _.include(taggedRowIds, d3.select(this).attr("row-id"));
        }).attr("stroke", function(d, i) {
          return window.clusterColor(d3.select(this).attr("cluster"));
        }).each(function() {
          return this.parentNode.appendChild(this);
        });
      } else {
        this.pcp.selectAll(".expression-line").remove();
        return this.addLongitudinalDataLines();
      }
    };

    return PcpView;

  })(Backbone.View);

}).call(this);
