// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.VolcanoModel = (function(_super) {

    __extends(VolcanoModel, _super);

    function VolcanoModel() {
      return VolcanoModel.__super__.constructor.apply(this, arguments);
    }

    VolcanoModel.prototype.initialize = function(parsedFile) {
      var gene, id;
      this.genes = this.formatFile(parsedFile);
      this.numGenes = this.genes.length;
      this.geneNames = (function() {
        var _i, _len, _ref, _results;
        _ref = this.genes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          gene = _ref[_i];
          _results.push(gene.gene_name);
        }
        return _results;
      }).call(this);
      this.geneIds = (function() {
        var _i, _ref, _results;
        _results = [];
        for (id = _i = 1, _ref = this.numGenes; 1 <= _ref ? _i <= _ref : _i >= _ref; id = 1 <= _ref ? ++_i : --_i) {
          _results.push("gene_" + id);
        }
        return _results;
      }).call(this);
      this.x_extent = this.getXExtent();
      return this.y_extent = this.getYExtent();
    };

    VolcanoModel.prototype.formatFile = function(file) {
      var _this = this;
      return file.map(function(row) {
        return {
          x: +row.x,
          y: +row.y,
          gene_name: row.gene_name
        };
      });
    };

    VolcanoModel.prototype.getGene = function(geneId) {
      return this.genes[this.geneIds.indexOf(geneId)];
    };

    VolcanoModel.prototype.getXExtent = function() {
      var x;
      x = this.genes.map(function(value) {
        return value.x;
      });
      return d3.extent(x);
    };

    VolcanoModel.prototype.getYExtent = function() {
      var y;
      y = this.genes.map(function(value) {
        return value.y;
      });
      return d3.extent(y);
    };

    VolcanoModel.prototype.getColumnNames = function() {
      var non_numeric_column_names,
        _this = this;
      non_numeric_column_names = /cluster/;
      return Object.keys(this.genes[0]).filter(function(columnName) {
        return !columnName.match(non_numeric_column_names) && isNumber(_this.genes[1][columnName]);
      });
    };

    return VolcanoModel;

  })(Backbone.Model);

}).call(this);
